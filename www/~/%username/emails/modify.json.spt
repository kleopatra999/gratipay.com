"""
Manages the authenticated user's email addresses.
"""
import re

from aspen import Response
from gratipay.exceptions import EmailTaken, EmailAlreadyVerified, Throttled
from gratipay.utils import get_participant
from gratipay.models.package import Package

# exactly one @, and at least one . after @
email_re = re.compile(r'^[^@]+@[^@]+\.[^@]+$')

[-----------------------------------------]

request.allow("POST")
participant = get_participant(state, restrict=True)

action = request.body['action']
address = request.body['address']

# Basic checks. The real validation will happen when we send the email.
if (len(address) > 254) or not email_re.match(address):
    raise Response(400, _("Invalid email address."))

if not participant.email_lang:
    participant.set_email_lang(request.headers.get("Accept-Language"))

msg = None
if action in ('add-email', 'resend', 'start-verification'):
    packages = []
    if action == 'start-verification':
        # work around Aspen limitation
        package_ids = request.body.all('package_id') if 'package_id' in request.body else []

        for package_id in package_ids:
            try:
                package = Package.from_id(package_id)
                assert address in package.emails
            except:
                raise Response(400)
            packages.append(package)
    elif 'package_id' in request.body:
        raise Response(400)

    participant.start_email_verification(address, *packages)
    msg = _("Check your inbox for a verification link.")
elif action == 'set-primary':
    participant.set_primary_email(address)
elif action == 'remove':
    participant.remove_email(address)
else:
    raise Response(400, 'unknown action "%s"' % action)

[---] application/json via json_dump
msg
