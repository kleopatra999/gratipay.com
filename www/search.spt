from gratipay.utils import markdown, truncate, icons
from gratipay.utils.i18n import LANGUAGES_2, SEARCH_CONFS, strip_accents
from markupsafe import Markup
[---]

def process_excerpt(excerpt):
    """Take a statement excerpt from *some*where and process it.
    """
    if not excerpt:
        return Markup('')
    return Markup('&middot; ' + excerpt)

def get_processed_excerpt(participant):
    """For a username match, take the first part of the statement.
    """
    statement = participant.get_statement(request.accept_langs, scrubbed=True)[0] or ''
    statement = truncate(statement, 128, '')
    return process_excerpt(statement)

# Can't factor this out because of translations?
i18ned_statuses = { "approved": _("Approved")
                  , "unreviewed" : _("Unreviewed")
                  , "rejected": _("Rejected")
                  , "featured": _("Featured")
                   }

action = request.qs.get('action')
query = request.qs.get('q')

banner = _("Search")
results = {}

if query:
    q = strip_accents(query)

    if not user.ADMIN:
        if action in (None, 'search_usernames'):
             results['usernames'] = website.db.all("""
             SELECT p FROM (
                 SELECT p.*::participants p, similarity(username, %(q)s) AS rank
                   FROM participants p
                  WHERE username %% %(q)s
                    AND claimed_time IS NOT NULL
                    AND is_searchable
                    AND NOT is_closed
               ORDER BY rank DESC, username
                  LIMIT 10
             ) _""", locals())
        if action in (None, 'search_projects'):
            results['projects'] = website.db.all("""
            SELECT project FROM (
                SELECT t.*::teams AS project, similarity(name, %(q)s) AS rank
                  FROM teams t
                 WHERE name %% %(q)s
                   AND NOT is_closed
                   AND is_approved
              ORDER BY rank DESC, name
                 LIMIT 10
            ) _""", locals())

    else:
        if action in (None, 'search_usernames'):
            results['usernames'] = website.db.all("""
             SELECT p FROM (
                SELECT p.*::participants p, similarity(username, %(q)s) AS rank
                  FROM participants p
                 WHERE username %% %(q)s
                   AND claimed_time IS NOT NULL
                   AND NOT is_closed
              ORDER BY rank DESC, username
                 LIMIT 10
            ) _""", locals())
        if action in (None, 'search_emails'):
            results['emails'] = website.db.all("""
            SELECT p FROM (
                SELECT p.*::participants p, similarity(email_address, %(q)s) AS rank
                  FROM participants p
                 WHERE email_address %% %(q)s
                   AND claimed_time IS NOT NULL
              ORDER BY rank DESC, username
                 LIMIT 10
            ) _""", locals())
        if action in (None, 'search_projects'):
            results['projects'] = website.db.all("""
            SELECT project FROM (
                SELECT t.*::teams AS project, similarity(name, %(q)s) AS rank
                  FROM teams t
                 WHERE name %% %(q)s
                   AND NOT is_closed
              ORDER BY rank DESC, name
                 LIMIT 10
            ) _""", locals())

    if action in (None, 'search_statements'):
        langs = tuple(l for l in request.accept_langs if l in LANGUAGES_2)
        search_confs = list(set(SEARCH_CONFS.get(lang, 'simple') for lang in langs))
        results['statements'] = website.db.all("""
        SELECT p, excerpts FROM (
            WITH queries AS (
                     SELECT search_conf::regconfig
                          , plainto_tsquery(search_conf::regconfig, %(q)s) AS query
                       FROM unnest(%(search_confs)s) search_conf
                 )
            SELECT p.*::participants p
                 , max(rank) AS max_rank
                 , json_agg((SELECT a FROM (
                       SELECT rank
                            , lang
                            , ts_headline( search_conf
                                         , content_scrubbed
                                         , query
                                         , 'MinWords=1,MaxWords=12,MaxFragments=1'
                                          ) AS excerpt
                   ) a)) AS excerpts
              FROM (
                       SELECT participant, lang, content_scrubbed, search_conf, query
                            , ts_rank_cd(search_vector, query) AS rank
                         FROM statements NATURAL JOIN queries
                        WHERE lang IN %(langs)s
                          AND search_vector @@ query
                     ORDER BY rank DESC
                        LIMIT 10
                   ) s
              JOIN participants p ON p.id = s.participant
          WHERE p.claimed_time IS NOT NULL
            AND p.is_searchable
            AND NOT p.is_closed
          GROUP BY username
          ORDER BY max_rank DESC
        ) _""", locals())


def empty_excerpts():

    # Part of MacGyvering result descriptions. It's ... wow, actually. When the
    # list_participants template macro sees None for excerpt, it will fall
    # through to the full participant statement, the beginning of which will be
    # excerpted.

    while 1:
        yield None


suppress_sidebar = True
page_id = "search"
zip = zip
[---] text/html
{% extends "templates/base.html" %}
{% from 'templates/list-participants.html' import list_participants with context %}
{% block content %}

    <form action="/search" method="get" class="important-thing-at-the-top">
        <input type="text" name="q" placeholder="{{ _('Search Gratipay') }}"
               value="{{ query or '' }}" autofocus />
        <button type="submit">{{ _("Search") }}</button>
    </form>

    {% set usernames = zip(results.get('usernames', []), empty_excerpts()) %}
    {% set statements = results.get('statements') %}
    {% set emails = zip(results.get('emails', []), empty_excerpts()) %}
    {% set projects = results.get('projects') %}

    {% if projects %}
    <h2>{{ ngettext("Found a matching project",
                    "Found matching projects",
                    len(projects)) }}</h2>
    <table class="listing">
        {% set project_list = projects %}
        {% include "templates/project-listing.html" %}
    </table>
    {% endif %}

    {% if usernames %}
    <h2>{{ ngettext("Found a matching username",
                    "Found matching usernames",
                    len(usernames)) }}</h2>
    {{ list_participants(usernames) }}
    {% endif %}

    {% if statements %}
    <h2>{{ ngettext("Found a matching user statement",
                    "Found matching user statements",
                    len(statements)) }}</h2>
    {{ list_participants(statements, extract_statement) }}
    {% endif %}

    {% if emails %}
    <h2>{{ ngettext("Found a matching email address",
                    "Found matching email addresses",
                    len(emails)) }}</h2>
    {{ list_participants(emails, show_emails=True) }}
    {% endif %}

    {% if query and not (usernames or statements or emails or projects) %}
    <p class="sorry">{{ _("Sorry, we didn't find anything matching your query.") }}</p>
    {% endif %}

{% endblock %}
[---] application/json via json_dump
results
