"""Return an array of objects with interesting data for the team.

We want one object per payday, but the team probably didn't participate in
every payday. Our solution is to fetch all paydays and all of the team's
payments, and then loop through payments and aggregate into the relevant
payday object.

If the team has never received, we return an empty array. Client code can take
this to mean, "no chart."

"""
import re

from aspen import json, Response


callback_pattern = re.compile(r'^[_A-Za-z0-9.]+$')


[---]

team = request.path['team']

# Fetch data from the database.
# =============================

paydays = website.db.all("""

      SELECT p.ts_start
           , p.ts_start::date   AS date
           , 0                  AS nreceiving_from
           , 0.00               AS receipts
        FROM paydays p
       WHERE id > 198 -- (Gratipay 2.0)
    ORDER BY ts_start DESC

""", back_as=dict)

payments = website.db.all("""\

   SELECT timestamp
        , amount
     FROM payments
    WHERE team=%s
      AND direction='to-team'
 ORDER BY timestamp DESC

""", (team.slug,), back_as=dict)


if not payments:

    # This team has never received money.
    # ===================================
    # Send out an empty array, to trigger no charts.

    paydays = []


if paydays:

    # Set up a generator to cursor through paydays.
    # =============================================

    def genpaydays():
        cur_week = 153 + len(paydays) # 154 was the first week of Gratipay 2.0
        for payday in paydays:
            payday['xText'] = cur_week
            cur_week -= 1
            yield payday

    paydaygen = genpaydays()

    curpayday = next(paydaygen)

    # Loop through transfers, advancing payday cursor as appropriate.
    # ===============================================================

    for payment in payments:
        while payment['timestamp'] < curpayday['ts_start']:
            del curpayday['ts_start'] # done with it, don't want it in output
            curpayday = next(paydaygen)

        curpayday['nreceiving_from'] += 1
        curpayday['receipts'] += payment['amount']


# Prepare response.
# =================

response.headers["Access-Control-Allow-Origin"] = "*"
out = paydays

# JSONP - see https://github.com/gratipay/aspen-python/issues/138
callback = request.qs.get('callback')
if callback is not None:
    if callback_pattern.match(callback) is None:
        raise Response(400, "bad callback")
    else:
        response.body = "%s(%s)" % (callback, json.dumps(out))
        response.headers['Content-Type'] = 'application/javascript'
        raise response

[---] application/json via json_dump
out
