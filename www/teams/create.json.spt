import zipfile
from cStringIO import StringIO

import requests
from aspen import Response

from gratipay.exceptions import InvalidTeamName
from gratipay.models.team import slugize, Team
from gratipay.utils.images import (
    imgize,
    ImageTooLarge,
    InvalidImageType,
    UnknownImageError
)

from psycopg2 import IntegrityError
[---]
request.allow('POST')

field_names = {
    'name': 'Team Name',
    'product_or_service': 'Product or Service',
    'homepage': 'Homepage',
    'image': 'Image',
}

if user.ANON:
    raise Response(401, _("You must sign in to apply for a new team."))
if user.participant.email_address is None:
    raise Response(400, _("You must have a verified email address to apply for a new team."))
if not user.participant.has_payout_route:
    raise Response(400, _("You must attach a PayPal account to apply for a new team."))

if user.participant.claimed_time is None \
or user.participant.is_suspicious is True \
or user.participant.is_closed:  # sanity checks
    raise Response(400, _("How are you applying for a team!?"))

if not request.body.get('agree_public', False):
    raise Response(400, _("Sorry, you must agree to have your application publicly reviewed."))
if not request.body.get('agree_terms', False):
    raise Response(400, _("Sorry, you must agree to the terms of service."))

if request.method == 'POST':
    fields = {}
    image = None
    image_type = None

    # Validate inputs

    for field in field_names.keys():
        if field == 'image':
            image = value = request.body[field].value  # file upload
            image_type = request.body[field].type
            if image_type not in ('image/png', 'image/jpeg'):
                raise Response(400, _("Please upload a PNG or JPG image."))
        else:
            value = request.body.get(field, '').strip(' ')
        if not value:
            raise Response(400, _("Please fill out the '{}' field.", field_names[field]))
        fields[field] = value

    if not any(map(fields['homepage'].lower().startswith, ('http://', 'https://'))):
        raise Response(400, _("Please enter an http[s]:// URL for the 'Homepage' field."))

    try:
        fields['slug'] = slugize(fields['name'])
    except InvalidTeamName:
        raise Response(400, _("Sorry, your team name is invalid."))

    try:
        large, small = imgize(image, image_type)
    except ImageTooLarge:
        raise Response(400, _("Please upload an image smaller than 100 kB."))
    except InvalidImageType:
        raise Response(400, _("Please upload a PNG or JPG image."))
    except UnknownImageError:
        raise Response(500, _("Sorry, there was a problem saving your image. Please try again."))

    try:
        team = Team.insert(user.participant, **fields)
    except IntegrityError:
        raise Response(400, _("Sorry, there is already a team using '{}'.", fields['slug']))

    team.save_image(image, large, small, image_type)

    review_url = website.app.project_review_repo.create_issue(team)
    team.set_review_url(review_url)

    team_url = website.env.base_url + '/{}/'.format(team.slug)

[---] application/json via json_dump
{'review_url': review_url, 'team_url': team_url}
